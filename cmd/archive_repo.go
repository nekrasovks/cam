package main

import (
	"archive/zip"
	"fmt"
	"io"
	"log"
	"os"
	"path/filepath"
	"strings"
)

func archive() {
	if len(os.Args) < 3 {
		fmt.Println("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: archive_repo.exe <source_path> <archive_name>")
		fmt.Println("–ü—Ä–∏–º–µ—Ä: archive_repo.exe .\\clone myrepo_backup.zip")
		os.Exit(1)
	}

	sourcePath := os.Args[1]
	archiveName := os.Args[2]

	fmt.Printf("üì¶ –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º %s –≤ %s...\n", sourcePath, archiveName)

	if err := createArchive(sourcePath, archiveName); err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏:", err)
	}

	fmt.Println("‚úÖ –ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:", archiveName)
}

func createArchive(sourcePath, archiveName string) error {
	// –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
	archiveFile, err := os.Create(archiveName)
	if err != nil {
		return err
	}
	defer archiveFile.Close()

	zipWriter := zip.NewWriter(archiveFile)
	defer zipWriter.Close()

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ö–æ–¥–∞ —Ñ–∞–π–ª–æ–≤
	return filepath.Walk(sourcePath, func(filePath string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã Git
		if strings.Contains(filePath, "\\.git\\") || strings.HasSuffix(filePath, "\\.git") {
			return nil
		}

		// –ü–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
		relPath, err := filepath.Rel(sourcePath, filePath)
		if err != nil {
			return err
		}

		// –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞ –≤ –∞—Ä—Ö–∏–≤–µ
		header, err := zip.FileInfoHeader(info)
		if err != nil {
			return err
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
		header.Name = filepath.ToSlash(relPath)

		// –î–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ—à
		if info.IsDir() {
			header.Name += "/"
		} else {
			header.Method = zip.Deflate // –°–∂–∞—Ç–∏–µ
		}

		writer, err := zipWriter.CreateHeader(header)
		if err != nil {
			return err
		}

		// –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª - –∫–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
		if !info.IsDir() {
			file, err := os.Open(filePath)
			if err != nil {
				return err
			}
			defer file.Close()

			_, err = io.Copy(writer, file)
			if err != nil {
				return err
			}
		}

		return nil
	})
}
